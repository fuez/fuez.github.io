#!/usr/bin/env python3
import re
import os
import subprocess
from datetime import datetime
from os import path
from glob import glob
import click

@click.command()
@click.option("--root", help="root directory contains markdown files", required=True)
@click.option("--target", help="diretory to put decorated markdown files to", required=True)
@click.option("--head", help="head tempate file path", default="./archetypes/tips.md")
def addposts(root: str, target: str, head: str):
    """
    Example
    ./addposts --root  ~/dev/bb/diary/tips --target ./content/post/tips
    """
    click.echo("root: %s, target:%s, head:%s" %(root, target, head))
    root = path.expanduser(root)
    target = path.expanduser(target)
    head = path.expanduser(head)
    if not path.exists(root):
        raise IOError(root)
    if not path.exists(head):
        raise IOError(head)
    if not path.exists(target):
        os.makedirs(target)
    with open(head) as h:
        htext = h.read()
    for sf in glob(path.join(root, "*.md")):
        # created_time = datetime.datetime.fromtimestamp(os.stat(sf).st_ctime).replace(microsecond=0).replace(tzinfo=datetime.timezone.utc).isoformat()
        click.echo(f"processing file:{sf}")
        created_time, lastmod_time = get_gitlog_date(sf)
        name = path.basename(sf)
        myh = re.sub(r"title:.+", "title: " + name[:-3], htext)
        myh = re.sub(r"date:.+", "date: " + created_time, myh)
        myh = re.sub(r"lastmod:.+", "lastmod: " + lastmod_time, myh)
        tf = path.join(target, name)
        with open(sf) as f:
            text = f.read()
        text = modify_text(text, name[:-3])
        with open(tf, "wt") as f:
            f.truncate()
            f.write(myh)
            f.write(text)

def modify_text(text: str, title: str):
    # remove H1 as we already have title here

    # move the first layer "- " to "## "
    lines = text.split("\n")
    for i in range(len(lines)):
        lines[i] = re.sub("^- ", "## ", lines[i])
        lines[i]= re.sub(r"^#{1,2}\s{0,3}[t/T]ips", "", lines[i])
    return "\n".join(lines)

def get_gitlog_date(file):
    proc = subprocess.Popen(["git", "log", "--oneline", path.basename(file)], cwd=path.dirname(file), stdout=subprocess.PIPE)
    all_logs = proc.stdout.read().decode().split('\n', )
    first_last = [_.split(' ')[0] for _ in [all_logs[-2], all_logs[0]]]
    ret = []
    for log in first_last:
        proc = subprocess.Popen(["git", "log", "-1", log], cwd=path.dirname(file), stdout=subprocess.PIPE)
        output = proc.stdout.read().decode()
        time_part = re.search(r"Date:\s+(.+)", output).group(1)
        ret.append(datetime.strptime(time_part, "%c %z").isoformat())
    return ret


if __name__ == '__main__':
    try:
        addposts()
    except Exception:
        import traceback
        traceback.print_exc()
